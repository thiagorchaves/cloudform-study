AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Platform:
    Type: String
    Default: "application"

  Product:
    Type: String
    Default: "locust"

  Customer:
    Type: String
    Default: "turner"

  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id

  DomainName:
    Type: String
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)

  CloudWatchRetentionInDays:
    Type: Number
    Default: 365
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  VpcCidrBlock:
    Type: String
    Default: 10.0.0.0
    Description: Valid CIDR range
    MinLength: 7
    MaxLength: 15
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x.

  DaysToRetainUntaggedContainerImages:
    Type: Number
    Description: The number days to retain untagged container images before expiring
    Default: 7
    MinValue: 1
    MaxValue: 100
    ConstraintDescription: Value must be between 1 and 100
  CloudWatchRetentionInDays:
    Type: Number
    Default: 365
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  BranchNames:
      Type: CommaDelimitedList
      Default: "master,develop"

Resources:
  # ===========
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub ${VpcCidrBlock}/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: [VPC, InternetGateway]
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      CidrBlock: !Select [0, !Cidr [!Select [0, !Cidr [!GetAtt VPC.CidrBlock, 16, 12]], 4, 10]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !Ref AvailabilityZones]
      CidrBlock: !Select [1, !Cidr [!Select [0, !Cidr [!GetAtt VPC.CidrBlock, 16, 12]], 4, 10]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  SubnetPublicRouteTableAssociationRetain1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: [PublicRouteTable, PublicSubnet1]
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  SubnetPublicRouteTableAssociationRetain2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: [PublicRouteTable, PublicSubnet2]
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
#======
  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    DeletionPolicy: Retain
    Properties:
      RepositoryName: !Sub ${Customer}-${Product}-${Platform}

  ECRRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicy:
        LifecyclePolicyText: !Sub
        - |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Only keep untagged images for ${DaysToRetainUntaggedContainerImages} days",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": ${DaysToRetainUntaggedContainerImages}
                },
                "action": { "type": "expire" }
              }
            ]
          }
        - DaysToRetainUntaggedContainerImages: !Ref DaysToRetainUntaggedContainerImages
      RepositoryName: !Sub ${Customer}/${Product}-${Platform}

  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${Customer}-${Product}-${Platform}.artifact-store.${AWS::Region}

  CodeBuildRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codebuild.amazonaws.com
      Path: /
      Policies:
        - PolicyName: ArtifactStoreBucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactStoreBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
        - PolicyName: CodeCommit
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: !GetAtt CodeCommitRepository.Arn
                Effect: Allow
                Action:
                  - codecommit:GitPull
        - PolicyName: Codebuild
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${AWS::StackName}-*
                Effect: Allow
                Action:
                  - codebuild:BatchPutTestCases
                  - codebuild:CreateReport
                  - codebuild:CreateReportGroup
                  - codebuild:UpdateReport
        - PolicyName: ECR
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - ecr:GetAuthorizationToken
              - Resource: !GetAtt ECRRepository.Arn
                Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:CompleteLayerUpload
                  - ecr:GetDownloadUrlForLayer
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
        - PolicyName: Logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}:*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-json-builds
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-json-builds:*
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    DeletionPolicy: Retain
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Cache:
        Type: S3
        Location: !Sub ${ArtifactStoreBucket}/cache/${CodeCommitRepository.Name}
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: REPOSITORY_NAME
            Value: !Ref ECRRepository
        Image: aws/codebuild/standard:3.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      Name: !Ref AWS::StackName
      QueuedTimeoutInMinutes: 120
      ServiceRole: !Ref CodeBuildRole
      Source:
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                docker: 18
            pre_build:
              commands:
                - aws --version
                - echo Logging in to Amazon ECR...
                - $(aws ecr get-login --no-include-email --region $AWS_REGION)
                - CODEBUILD_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
                - GIT_MOST_RECENT_TAG="$(git describe --tags --abbrev=0)"
                - MAJOR=$(echo $GIT_MOST_RECENT_TAG | cut -d'.' -f1)
                - MINOR=$(echo $GIT_MOST_RECENT_TAG | cut -d'.' -f2)
                - PATCH=$(echo $GIT_MOST_RECENT_TAG | cut -d'.' -f3)
                - NEXT_PATCH=$(expr $PATCH + 1)
                - RELEASE=undefined
                - BRANCH_TYPE=$(echo $CODEBUILD_SOURCE_VERSION | cut -d'/' -f3)
                - if [ "$BRANCH_TYPE" = "master" ]; then RELEASE=master; fi
                - if [ "$BRANCH_TYPE" = "release" ]; then RELEASE=$(echo $CODEBUILD_SOURCE_VERSION | cut -d'/' -f4); fi
                - if [ "$BRANCH_TYPE" = "hotfix" ]; then RELEASE=$MAJOR.$MINOR.$NEXT_PATCH; fi
                - REPOSITORY_URI=${CODEBUILD_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${REPOSITORY_NAME}
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build --build-arg RELEASE -t ${REPOSITORY_URI}:${RELEASE} .
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push ${REPOSITORY_URI}:${RELEASE}
          cache:
            paths:
              - '/root/.cache/**/*'
              - '/root/.local/**/*'
        GitCloneDepth: 0
        GitSubmodulesConfig:
          FetchSubmodules: true
        Location: !GetAtt CodeCommitRepository.CloneUrlHttp
        Type: CODECOMMIT
      TimeoutInMinutes: 15

  CloudWatchEventRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - events.amazonaws.com
      Path: /
      Policies:
        - PolicyName: cwe-codebuild-execution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: codebuild:StartBuild
                Resource: !GetAtt CodeBuildProject.Arn

  RepositoryEventRule:
    Type: AWS::Events::Rule
    DeletionPolicy: Retain
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !GetAtt CodeCommitRepository.Arn
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceFullName:
            - refs/heads/master
      Targets:
        - Id: CodeBuildProject
          Arn: !GetAtt CodeBuildProject.Arn
          RoleArn: !GetAtt CloudWatchEventRole.Arn
          InputTransformer:
            InputPathsMap:
              sourceVersion: $.detail.referenceFullName
            InputTemplate: '{"sourceVersion": <sourceVersion>}'

  PullRequestEventRule:
    Type: AWS::Events::Rule
    DeletionPolicy: Retain
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Pull Request State Change
        resources:
          - !GetAtt CodeCommitRepository.Arn
        detail:
          event:
            - pullRequestCreated
            - pullRequestSourceBranchUpdated
          destinationReference:
            - refs/heads/master
      Targets:
        - Id: CodeBuildProject
          Arn: !GetAtt CodeBuildProject.Arn
          RoleArn: !GetAtt CloudWatchEventRole.Arn
          InputTransformer:
            InputPathsMap:
              sourceVersion: $.detail.sourceReference
            InputTemplate: '{"sourceVersion": <sourceVersion>}'

Outputs:
  LocustRole:
    Value: !GetAtt CodeBuildRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-Arn

  ECRName:
    Value: !GetAtt ECRRepository.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ECRArn

  BucketName:
    Value: !Ref ArtifactStoreBucket
    Export:
      Name: !Sub ${AWS::StackName}-bucket

